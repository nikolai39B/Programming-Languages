Programming Languages Notes

03/18/16

Inheritance
-	Subtyping
	-	use if "every B is an A"
	-	subtypes are substitutable for supertypes
	-	B is a "true" subtype of A if B has a stronger specification than A
		-	avoid non-true subtypes
	-	avoid repeating unchanged fields/methods
	-	be careful (squares not exactly rectanges...)
		-	any property guaranteed by the base class must be guaranteed by the child class
		-	don't "weaken the spec"
-	Interfaces
	-	subtyping without inheritance (no implementation)
	-	classes/interfaces can inherit from multiple interfaces

03/16/16

Paradigms
-	Declarative
	-	set of constraints expressed as logic
	-	used for specs/modeling
	-	examples: Prolog, Racklog
-	Imperative
	-	statement execution results in state changes and is determined via control 
		structures
	-	assignments and side effects
	-	examples: C, C++, Java, Python
	
Object Oriented Paradigm
-	Terms
	-	class: a type that contains data and functions to operate on the data
	-	object: instance of a class
-	Subtyping
	-	intuitively, if Y is a subtype of X, Y has all the fields X has

03/02/16

Types
-	Correctness
	-	assume a type system is supposed to prevent X
	-	sound
		-	a type system is sound if it never accepts a program that produces X
		-	no "false negatives"
	-	complete
		-	a type system is complete if it never rejects a program that will not do X
		-	no "false positives"
	-	goal of a PL type system is to be sound but not necessarily complete
	-	can't ever have a sound and complete system that also always terminates
-	Weak Typing
	-	must pass static checking but can do anything once run
	-	C and C++ are this way

02/29/16

Racket Datatypes
-	Datatype
	-	no "datatype" keyword like in SML
	-	not necessary; can mix values of different types and use primitives like "number?",
		"string?", "pair?" etc to parse
-	Struct
	-	(struct NAME (ITEM_1 ITEM_2 ... ITEM_N) ATTRIBUTE_1 ... ATTRIBUTE_N)
	-	attributes
		-	'#:transparent' prints struct values for debugging purposes
		-	'#:mutable' provides more functions to support mutation
	-	functions
		-	member retrieval
			-	NAME-ITEM_1, NAME-ITEM_2, ...
			-	Ex:
				(foo-item1 e)
		-	type checking
			-	NAME?
			-	Ex:
				(foo? e)
		-	constructing
			-	NAME
			-	Ex:
				(foo e1 e2 e3)	

02/24/16

Streams
-	Stream Concepts
	-	infinite sequence of values
	-	cannot make a stream by making all the values
	-	use a thunk to delay creating most of the sequence
-	Stream Implementation
	-	implemented as a thunk that retruns a pair: (next_answer, next_thunk)
    -   use car and cdr to get elements
        -   First:  (car (s))
        -   Second: (car ((cdr (s))))
        -   Third:  (car ((cdr ((cdr (s))))))
-   Making a Stream
    -   Ex:
        (define ones 
            (lambda () 
                (cons 1 ones)
            )
        )
        
        (define powers-of-two
            (letrec
                (
                    [
                        f (lambda (x)
                            (cons
                                x
                                (lambda ()
                                    (f
                                        (* x 2)
                                    )
                                )
                            )
                        )
                    ]
                )
                (lambda ()
                    (f 2)
                )
            )
        )
    -   Template:
        (define (createStreamWithValueModifier initialValue getNextValueFromCurrent modifyValue)
            (letrec
                (
                    ; Define our main function for the stream
                    [
                        getNextPair (lambda (currValue)
                            ; Prepend the current value to the next stream
                            (cons
                                ; Modify and prepend the current value
                                (modifyValue currValue)

                                ; Define the next stream
                                (lambda ()
                                    (getNextPair
                                        (getNextValueFromCurrent currValue)
                                    )
                                )
                            )
                        )
                    ]
                )
            
                ; Define the intial value
                (lambda ()
                    (getNextPair initialValue)
                )
            ) 
        )
    
	
Memoization
-	Memoization Concepts
	-	if a function has no side effects and does not read mutable memory, no point in 
		computing it twice
	-	keep a "cache" of previous results
    -   assoc
        -   (assoc v lst) takes a list of pairs and locates the first element of lst whose 
			car is equal to v
        -   returns the pair if possible; otherwise, #f
	
Macros
-	Macros Concepts
	-	used to implement syntactic sugar
    -   Ex:
        (my-if x then y else z)
        (comment-out (car null) #f)
    -   Avoid overuse
	
02/22/16 

Lazy vs Eager Evaluation
-	Delayed Evaluation
	-	Function arguments are "eager"
		-	Evaluated once before calling the function
	-	Conditional branches are not "eager"
-	Thunks
	-	zero-argument functions used to delay execution
	-	since we only evaluate the function body when the function is called, we delay 
		execution of the function body until the function is needed
	-	Ex:
		(lambda () e)
		...
		(e)
-	Lazy Evaluation
	-	expression not computed until needed
	-	remember the answer so future uses complete immediately
	-	only useful if computation is expensive and has no side effects

02/19/16

Introduction to Racket
-   Basics
    -   functional focus
    -   no pattern matching
    -   parentheses very important
    -   start files with '#lang racket'
    -   comments start with ';'
    -   dynamically typed
-   Parentheses
    -   denote a function call
    -   (FUNC_NAME PARAM1 PARAM2 ...)
    -   Ex:
        (foo x y) ; call foo(x, y)
        (= y 3) ; evaluate y == 3
    -   never extraneous
        -   (e) means call e with zero arguments
        -   ((e)) means call e with zero arguments, then call the result with zero arguments
    -   can use [] in place of ()
-   Defining Functions
    -   (define (FUNC_NAME PARAM1 PARAM2 ...)
            FUNC_BODY)
    -   Ex:
        (define (cube x)
            (* x x x))
    -   can also do it anonymously
        -   use 'lambda' expression
        -   (lambda (PARAM1 PARAM2 ...) 
                FUNC_BODY)
        -   Ex:
            (define cube
                (lambda (x)
                    (* x x x)))
-   List Processing
    -   build in methods
        -   empty list: null
        -   cons constructor: cons
        -   head: car
        -   tail: cdr
        -   check for empty: null?
    -   building lists
        - (list e1 ... en)
-   Racket Syntax
    -   terms
        -   atoms: 34, "hi", null, x, #t, ...
        -   special forms: define, lambda, if, ...
        -   sequence of terms in parentheses: (t1 t2 ... tn)
-   Conditionals
    -   use 'cond' in place of nested ifs
    -   (cond [case1 result1]
              [case2 result2]
              ...
              [caseN resultN])
    -   good style: caseN should be #t
    
Local Bindings
-   Let
    -   binds any number of local variables
    -   expressions are evaluated in the environment from before the 'let' expression
    -   Ex:
        (let ([x (+ 2 3)]
              [y (- 10 7)])
            (+ x y -2))
-   Let*
    -   same as let, but also considers bindings generated earlier in the 'let*' expression
    -   work like SML 'let' expressions
-   Letrec
    -   same as let*, but considers all bindings generated in the 'letrec' expression
    
Mutation
-   Set!
    -   'set!' functions mutate values
    -   Ex:
        (define a 4)    ; a = 4
        (println a)     ; prints 4
        (set! a 21)     ; a = 21
        (println a)     ; prints 21

02/10/16

Modules
-   Structures
    -   Use structures to define modules
    -   Ex:
        structure MyModule =
        struct
            fun fact(x) =
                <FUNCTION>
            val half_pi = Math.pi / 2.0
            fun doubler(x) = 
                x * 2
        end
    -   More than just namespace management
-   Signatures
    -   Signature is a type for a module
    -   Can define a signature and ascribe it to a module
    -   Ex:
        signature MATHLIB =
        sig
            val fact : int -> int
            val half_pi : real
            val doubler : int -> int -> ?a 'a #4
        end
    -   Assigning a signature to a module:
            structure MyModule :> <SIGNAME> =
            struct
                <BINDINGS>
            end
        -   Module must match the signature
    -   Can add functions to modules that aren't in the signature
        -   They become "private"
        
Type-Checking
-   Static vs Dynamic
    -   Static: ensure that all signatures are correct before program runs
    -   Dynamic: allow signatures to change
-   Implicit typing
    -   Will infer type from context
    -   Can still be static
    -   Steps
        -   Determine all bindings in order (to allow later functions to use earlier ones)
        -   Analyze fun/val bindings for all necessary constraints
        -   Type error any issues
        -   Give generic types ('a) for unconstrained types
		
02/08/16

Function Composition
-   Ex:
    fun compose(f, g) =
        fn x => f(g(x))
-   Composes right-to-left by default
    -   Use the infix operator to do left-to-right
    -   Ex:
        infix |>
        fun x |> f = 
            f(x)
        
        fun sqrtOfAbs i =
            i |> abs |> Real.fromInt |> Math.sqrt
            
References
-   Allows for mutation
-   t ref (where t is a type)
-   Ex:
    ref e       (* Create reference with initial contents e *)
    e1 := e2    (* Update contents *)
    !e          (* Retrieve contents *)

02/05/16

Functional Scoping
-   Types
    -   Lexical scope - environment where function is defined
    -   Dynamic scope - environment where function is called
-   Prefer lexical scope
-   Why lexical scope?
    -   Function meaning does not depend on variable names used
    -   Functions can be type-checked
    -   Closures can easily store the data they need
    
02/03/16

Inferred Types
-	Used in function arguments
-	Ex:
	fun n_times (f,n,x) =
		if 
			n = 0
		then 
			x
		else 
			f(n_times(f, n - 1, x))
			
Anonymous Functions
-	Declared using fn ([args]) => [body]
-	Ex:
	fun triple_n_times (f, x) =
		n_times((fn y => 3  * y), n, x)

02/01/16

Exceptions
-	Ex: ([] means optional)
	exception MyException [of int * int]
	raise (MyException [(7, 9)] )
	e1 handle MyException [(x, y)] => e2

Tail Recursion
-   Recursive call is at end of function
-   Not always possible

Functional Programming Concepts
-   Avoiding mutation of values
-   Using functions as values

First-class Functions
-   Can use them whenever we use values

Function Closures
-   Functions can use bindings from outside the function definition
    -   In scope where function is defined
-   Different from first-class functions

01/25/16

Datatype Bindings
-   Ex:
    datatype mytype = TwoInts of int * int
                    | Str of string
                    | foo
-   You can use the types defined with this method later on
-   Expression Trees
    -   Ex:
        datatype exp = Constant of int
                     | Negate of exp
                     | Add of exp * exp
                     | Multiply of exp * exp
-	Each-of pattern matching
	-	Pattern (x1, x2, ... , xn) matches tuple value (v1, v2, ... , vn)
	-	Pattern { f1 = x1, ... , fn = xn } matches record value { f1 = v1, ... , fn = vn}
-	Val-binding patterns
	-	val-binding can use a pattern
	-	Ex:
		fun sum_triple triple =
			let 
				val (x, y, z) = triple
			in
				x + y + z
			end
	-	Function-argument patterns
		-	Match against the argument in a pattern
		-	Ex:
			fun full_name {first=x, middle=y, last=z} =
				x ^ " " ^ y ^ " " ^ z
				
Generic Types
-	The 'a can stand for any type, but only one type
	-	Referred to type variable
	-	Ex:
		'a list
            
01/22/16

Boolean Operators
-   andalso, orelse, not

Comparisons
-   <, <=, >, >= can be used with two ints or two reals
-   <>, = can be used with two ints but NOT two reals
        
Immutability
-   No assignment statements
-   Don't have to worry about functions changing your data

Building Bigger Types
-   Type building blocks
    -   "Each of" - a t value contains values each of t1, t2, ... , tn
    -   "One of" - a t value contains values of one of t1, t2, ... , tn
    -   "Self reference" - a t value can refer to other t values
-   "Each of" types
    -   Records
        -   have named fields
        -   values: { f1 = v1, ... , fn = vn }
        -   types: { f1 : t1, ... , fn : tn }
        -   building: { f1 = e1, ... , fn = en }
        -   accessing: #fieldName recordName
        -   tuples are basically records of the form { 1 = v1, 2 = v2, ... , n = vn }

01/20/16

Let Expressions
-   Adds scope to bindings
-   Ex:
    fun foo(x : int) =
    let val y = if x > 0 then x + 3 else 2
    in
        2 * y + x
    end
-   Can also do functions
    -   Ex:
        let fun goo() =
            "goo"
            
Options
-   Let you return 'null' instead of an actual value
-   t option is a type for any type t
    -   Much like t list, but a different type (not a list)
-   Building
    -   NONE has typ 'a option
    -   SOME e has type t option if e has type t
-   Accessing
    -   isSome has type 'a option -> bool
    -   valOf has type 'a option -> 'a
        
01/15/16

Tuples
-   (e1, e2, ... en)
    -   Evaluates to (v1, v2, ... vn)
    -  #1, #2, ... #n accesses the corresponding element
        -   #loc tuple -> tuple[loc - 1]
-   Most basic: pairs (2-tuples)
-   Can be any collection of types (not all items must be the same type)
-   Ex:
    fun swap (pr : int*bool) = 
        (#2 pr, #1 pr)
-   Nesting
    -   (e1, (e2, e3)) is valid
    
Lists
-   Empty list: []
-   All values must be the same data type
-   Appending
    -   Let e1 evaluate to v0
        Let e2 evaluate to [v1, v2, ... , vn]
        Then e1::e2 evaluate to [v0, v1, v2, ... , vn]
    -   For e1::e2 to work, e1 must be of type 't' and e2 must be of type 't list'
-   Null: 'null e' evaluates to 'true' iff e evaluates to []

01/13/16

Addition
-	e1 + e2 where e1, e2 are expressions
-	if e1, e2 have type int, e1 + e2 have type int

Conditionals
-	if ... then ... else
-	Ex:
	if
		x > 3
	then
		5
	else
		x + 4

Function Bindings
-   fun x0 (x1 : t1, ... , xn : tn) = e
-   A function is a value.
-   New kind of type: (t1 * ... * tn) -> t
    -   Result type on right
    -   x0 gets this type 
    
Function Calls
-   e0 (e1, ... , en)
    -   Parentheses optional if only one argument
-   Type checking
    -   if e0 has some type (t1 * ... * tn) -> t
        and e1 has type t1
        and en has type tn
        then e0 (e1, ... , en) has type t
    